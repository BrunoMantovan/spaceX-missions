---
import {getLaunches, getTotalLaunches} from "../services/launches.ts"
import CardLaunch from "./CardLaunch.astro";

const params = new URLSearchParams(Astro.request.url.split("?")[1])
const currentPage = parseInt(params.get("page") || "1");
const limit = parseInt(params.get("limit") || "12");
const sort = params.get("sort") || "asc"

const [launches, totalPages] = await Promise.all([
  getLaunches(currentPage, limit, sort),
  getTotalLaunches(limit),
]);

const totalPagesNumber = totalPages ?? 1;

const nextPage = currentPage + 1; 
const prevPage = currentPage - 1;

const generateUrl = (page: number, limit: number, sort: string) => {
  let url = `/?page=${page}&limit=${limit}&sort=${sort}`;
  return url;
};

const generatePagination = (currentPage: number, totalPagesNumber: number) => {
  const pagination = [];

  pagination.push({ page: 1, label: "1" });

  if (currentPage > 3 && totalPagesNumber > 4) {
    pagination.push({ page: null, label: ". . ." });
  }

  for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPagesNumber - 1, currentPage + 1); i++) {
    if(currentPage === totalPagesNumber && totalPagesNumber > 3){pagination.push({ page: (totalPagesNumber - 2), label: `${totalPagesNumber - 2}`})}
    pagination.push({ page: i, label: `${i}` });
    if(currentPage === 1 && totalPagesNumber > 3){pagination.push({ page: 3, label: "3"})}
  }

  if (currentPage < totalPagesNumber - 2 && totalPagesNumber > 4) {
    pagination.push({ page: null, label: ". . ." });
  }

  if (totalPagesNumber > 1) {
    pagination.push({ page: totalPagesNumber, label: `${totalPagesNumber}` });
  }

  return pagination;
};

const pagination = generatePagination(currentPage, totalPagesNumber);
---

<div id="missions" class="mb-4">
  <form method="GET" class="flex items-center space-x-4">
    
    <label for="sort" class="text-white font-medium">Sort:</label>
    <select id="sort" name="sort" class="rounded-lg p-2 bg-gray-800 text-white">
      <option value="asc" selected={sort === "asc"}>Upward</option>
      <option value="desc" selected={sort === "desc"}>Downward</option>
    </select>

    <label for="limit" class="text-white font-medium">Limit:</label>
    <select id="limit" name="limit" class="rounded-lg p-2 bg-gray-800 text-white">
      <option value="12" selected={limit === 12}>12</option>
      <option value="24" selected={limit === 24}>24</option>
      <option value="36" selected={limit === 36}>36</option>
    </select>

    <button type="submit" class="px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700">
      Apply
    </button>
  </form>
</div>

<div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
  {launches.map(launch => (
      <CardLaunch id={launch.id} img={launch.links.patch.small || launch.links.patch.large} details={launch.details} name={launch.name} success={launch.success} />
  ))}
</div>
<div class="flex gap-2 mt-4 justify-center items-center">
  {currentPage > 1 && (
    <a href={generateUrl(prevPage, limit, sort)} class="py-4 px-2 mt-2 rounded w-10 h-10 flex justify-center items-center mx-1" style="background-color: #6f8fa5;">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" width="24" height="24" stroke-width="2">
        <path d="M15 6l-6 6l6 6"></path>
      </svg>
    </a>
  )}
  {pagination.map(({ page, label }) => (
    page ? (
      <a href={generateUrl(page, limit, sort)} class="py-4 px-2 mt-2 rounded w-10 h-10 flex justify-center items-center mx-1" style={`background-color: ${page === currentPage ? "#0d9488" : '#6f8fa5'}`}>
        {label}
      </a>
        ) : (
      <span class="mt-2 rounded h-8 flex justify-center items-top font-bold" style="line-height: 1.5">
        {label}
      </span>
    )
  ))}
  {currentPage < totalPagesNumber && (
    <a href={generateUrl(nextPage, limit, sort)} class="py-4 px-2 mt-2 rounded w-10 h-10 flex justify-center items-center mx-1" style="background-color: #6f8fa5;">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" width="24" height="24" stroke-width="2"> <path d="M9 6l6 6l-6 6"></path> </svg> 
    </a>
  )}
</div>

